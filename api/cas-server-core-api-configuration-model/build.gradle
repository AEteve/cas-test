description = "Apereo CAS Core Configuration Model"
def skipConfigurationMetadata = providers.systemProperty("skipNestedConfigMetadataGen").present

sourceSets.test.resources.srcDirs += sourceSets.main.resources.srcDirs

sourceSets {
    configurationMetadata {
        resources {
            srcDir 'src/config'
        }
    }
}

dependencies {
    implementation libraries.jasypt
    implementation libraries.bouncycastle
    implementation libraries.springbootconfigmetadata
    implementation libraries.jose4j
    implementation libraries.classgraph
    
    testImplementation libraries.springbootconfigmetadata

    compileOnly libraries.javaparser
    compileOnly libraries.log4j
    
    if (!skipConfigurationMetadata) {
        annotationProcessor libraries.springbootconfigmetadata
    }
}

if (!skipConfigurationMetadata) {
    def outputFile = project.layout.buildDirectory.file("generated/spring-configuration-metadata/META-INF/spring-configuration-metadata.json")
    def inputFile = project.layout.buildDirectory.file("classes/java/main/META-INF")

    tasks.register('generateConfigurationMetadata', JavaExec) {
        inputs.files(tasks.named('processResources'), tasks.named('compileJava'))

        outputs.cacheIf { true }
        outputs.file(outputFile)

        mainClass.set("org.apereo.cas.configuration.metadata.ConfigurationMetadataGenerator")

        def sortedClasspath = sourceSets.main.compileClasspath + sourceSets.main.runtimeClasspath + sourceSets.configurationMetadata.runtimeClasspath
        classpath = files(sortedClasspath.sort())
        args project.layout.buildDirectory.getAsFile().get().path, projectDir.canonicalPath
        finalizedBy("copyConfigurationMetadata")
    }

    tasks.register('copyConfigurationMetadata', Copy) {
        from outputFile
        into inputFile
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }

    tasks.named('compileJava') {
        inputs.files(tasks.named('processResources'))
        finalizedBy("generateConfigurationMetadata")
    }
    sourceSets.main.output.dir inputFile, builtBy: "copyConfigurationMetadata"
}
